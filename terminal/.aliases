# ~/.aliases
echo ".aliases"

# Navigation and file listing
alias -- -='cd -' # Toggle between last two directories
alias cde="cd ~/code/"
alias cl="cd ~/Library/CloudStorage/"
alias desk="cd ~/Desktop/"
alias dev="cd ~/dev/"
alias dl="cd ~/Downloads/"
alias docs="cd ~/Documents/"
alias dot="cd $DOTFILES"
alias drb="cd ~/Dropbox/"
alias ds="cd ~/Dropbox/DropsyncFiles"
alias dt="cd ~/Desktop/" # "dt" is also a command line tool to display information about your domain on Linux or Unix system
alias dwn="cd ~/Downloads/"
alias prj="cd ~/Dropbox/projects/"
# Save and then change the current directory. With no arguments, pushd exchanges the top two directories.
alias pu="pushd"
# Remove the top entry from the directory stack, and cd to the new top directory.
alias po="popd"
# Always list directory contents upon "cd"
function cd() {
    builtin cd "$@"
    ls -A # List entries starting with ., but do not list implied . and ..
}
# If running bash
if [ -n "$BASH_VERSION" ]; then
    # # Include .bashrc if it exists
    # if [ -f "$HOME/.bashrc" ]; then
    # . "$HOME/.bashrc"
    # fi
    alias ....="cd ../../.."
    alias ...="cd ../.."
    alias ..="cd .."
    echo "BASH settings and aliases loaded"
fi

# Software management
alias bc="brew cleanup" # Remove old versions of installed software
alias bi="brew install"
alias bl="brew list"
alias br="brew reinstall"
alias bs="brew search"
alias bsl="brew services list"
alias bss="brew services stop"
alias bu="brew update && brew upgrade && brew upgrade --cask && brew cleanup"
alias bun="brew uninstall"
alias bunn="brew uninstall --ignore-dependencies"
alias bupc="brew upgrade --cask" # Upgrade all casks installed with homebrew
alias bupd="brew update"         # Update homebrew itself and the package lists
alias bupg="brew upgrade"        # Upgrade all software installed with homebrew
alias sysu="softwareupdate -ai"  # Run all macOS updates for Xcode, etc..
if [[ $(uname) == "Linux" ]]; then
    alias ai="sudo apt install"
    alias ar="sudo apt remove"
    alias aun="sudo apt remove"     # (a)pt (un)install
    alias arr="sudo apt autoremove" # Remove packages are no longer needed as dependencies
    alias as="sudo apt search"
    alias acs="apt-cache search"
    alias au="sudo apt update"     # Update repositories
    alias ag="sudo apt upgrade -y" # Update software (packages)
    alias auu="sudo apt update && sudo apt upgrade -y"
fi

# Git
alias gcca="git config --list"                                                          # Show git config
alias gccg="git config --list --global"                                                 # Show global git config
alias gccl="git config --list --local"                                                  # Show local git config
alias gll="git log --pretty='%C(yellow)%h %Creset%C(cyan)%ar %C(green)%an %C(reset)%s'" # Prettier git log. "gl" is alias for "git pull" in git plugin
alias gpp="git push && git push --tags"                                                 # Push commits and tags
alias gs="git status -s -b"                                                             # Cleaner git status
alias gw="git config --get core.isWork || echo false"                                   # Check if work config is applied
# JS/TS, npm, yarn
alias ncul="ncu --target lastest"         # Show available depenecy updates with breaking changes
alias ncuu="ncu --upgrade --target minor" # Upgrade to non breaking dependency versions (minor and bugfixes) in package.json
alias npmg="npm list -g --depth 0"        # List global packages
alias nb="npm run build"
alias nd="npm run dev"
alias ndd="tsc -w -p tsconfig.build.json"
alias ni="npm install"
alias nl="npm run lint"
alias ns="npm run start"
alias nt="npm run test"
alias nti="npm run test:integration"
alias nu="npm run build && npm run lint && npm run test"
alias yb="yarn build"
alias yd="yarn dev"
alias yg="yarn global list"
alias yl="yarn lint"
alias ys="yarn start"
alias yt="yarn test"
alias yt="yarn test:integration"
alias yu="yarn lint && yarn test"
alias yy="yarn install --check-files"
# Python, pip and jupyter
alias py="python"
alias pipi="PIP_REQUIRE_VIRTUALENV=false && pip install --upgrade --user" # Install package in user scope
alias pipl="pip list --user"                                              # List user packages
alias pipll="pip list"                                                    # List global packages
alias jn="jupyter notebook"
alias jl="jupyter lab"
# Pipenv
alias peg="pipenv graph"                                 # Dependency graph
alias peh="pipenv --where"                               # Project home path
alias pei="pipenv install"                               # Install dependencies
alias per="pipenv run"                                   # Run a command in the virtual environment without launching a shell
alias perm="pipenv --rm"                                 # Remove virtual environment
alias pes="pipenv shell"                                 # Activate virtual environment
alias pess="[ -z \"$PIPENV_ACTIVE\" ] && echo \"false\"" # Check if pipenv environment is activated
alias peu="pipenv update"                                # Update all or specified dependencies
alias peun="pipenv uninstall"                            # Uninstall dependency
alias pew="pipenv --venv"                                # Check location of the environment
# Docker
alias da='docker attach'                                                                                  # Get back to running container
alias dcls='docker compose ls -a'                                                                         # List running compose projects
alias ddr='docker run -it --rm --name disposable'                                                         # Run any disposable container and delete it after exiting
alias ddru='docker run -it --rm --name disposable-ubuntu ubuntu:23.04 || docker attach disposable-ubuntu' # Run Ubuntu container and automatically delete it when it exits
alias dei='docker exec -it'                                                                               # Docker run interactive shell
alias dls='docker images'                                                                                 # See downloaded images = docker image ls
alias dnls='docker network ls'                                                                            # List docker networks
alias dps='docker ps --format="$DOCKER_FORMAT"'                                                           # See running containers = docker container ls
alias dpss='docker ps -a --format="$DOCKER_FORMAT"'                                                       # See all containers (not only those that run) = docker container ls -a
alias drn='docker run -w /src -v $PWD:/src --rm node:18'                                                  # Run Node commands without installing it. "-w /src" - creates folder inside a container.
alias dru='docker start -i ubun || docker run -it --name ubun -v ubuntu_data:/home pu/ubuntu fish'        # Run custom Ubuntu container (create it if needed)
alias dst='open -a Docker'                                                                                # Docker [st]art daemon
alias dvls='docker volume ls'                                                                             # List docker volumes
export DOCKER_FORMAT='ID\t{{.ID}}\nNAME\t{{.Names}}\nIMAGE\t{{.Image}}\nPORTS\t{{.Ports}}\nCOMMAND\t{{.Command}}\nCREATED\t{{.CreatedAt}}\nSTATUS\t{{.Status}}\n'

# Shell control
alias __="append_less_pipe"                      # Add "| less" to passed param
alias ag="alias | grep"                          # Quick search in aliases
alias brc="$EDITOR ~/.bashrc"                    # Bash config
alias c="clear"                                  # Clear shell screen
alias cls="clear"                                # Or user keyboard shortcut Command + K { # K }
alias ee="exit"                                  # Quit shell (one of alternative aliased)
alias fn='find . -name'                          # Find by given NAME
alias fnd='find . -type d -name'                 # Find by given NAME
alias fnf='find . -type f -name'                 # Find by given NAME
alias p="pwd"                                    # Print working directory
alias pe='printenv'                              # Print environment variables
alias reload="source ~/.zshrc"                   # ZSH settings reload
alias rr="clear && exec ${SHELL} -l"             # Reload the shell
alias s="sudo"                                   # Sudo shorthand
alias split_path='echo "$PATH" | sed "s/:/\n/g"' # Display PATH over multiple lines.
alias x='exit'                                   # Quit shell (one of alternative aliased)
alias zrc="$EDITOR ~/.zshrc"                     # ZSH config
alias zshrc="${EDITOR} ${HOME}/.zshrc"           # Alternative alias for ZSH config

# Sensible defaults (same command but with differrent default value)
alias df="df -h"               # Human readable
alias du="du -h"               # Human readable
alias htop="htop -t"           # Processes in an indented tree - control+C to stop
alias rm='rm -i'               # Prompt before every removal
alias cp='cp -i'               # Prompt before overwrite
alias mv='mv -i'               # Prompt before overwrite
alias mount='mount |column -t' # Make mount command output pretty and human readable format

# System control (startup, restart, shutdown, cron jobs)
alias crn="crontab -e"                                    # Edit current crontab
alias restart="sudo shutdown -r now"                      # Requires root password, disable it by sudo chmod u+s /sbin/shutdown
alias services="systemctl list-unit-files | grep enabled" # List enabled services (Linux, WSL)
alias shutdown="sudo shutdown -h now"                     # Requires root password, disable it by sudo chmod u+s /sbin/shutdown
alias startup="gnome-session-properties"

# Program access
alias bw="bwm-ng -d"         # Network speed with dynamic units like K, M or G
alias deb="sudo dpkg -i"     # Install deb package (for Ubuntu, Debian, Raspbian)
alias nv="nvim"              # Neovim
alias nvu="nvim +PackerSync" # Neovim with `PackerSync` to make changes to your plugin configuration
alias nvup="nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'"
alias nvrc="${EDITOR} ${HOME}/.config/nvim/init.vim"      # Neovim config
alias mpvv=mpv_detached                                   # Run MPV in detached mode
alias rmm="rm -rf"                                        # Remove non-empty folder
alias space="du -h | awk 'END{print $1}'"                 # Space used by current folder (and subfolders)
alias taru='tar xzvf'                                     # Unzip
alias tarx="tar -xvf"                                     # Unzip
alias tarz='tar czvf'                                     # Zip
alias td="tmux detach"                                    # Exit the tmux window to come back to later
alias tl="tmux ls"                                        # = tmux list-sessions
alias tm="tmux"                                           # = tmux new = tmux new-session
alias tmks="tmux kill-server"                             # Cleanly and gracefully kill all tmux open sessions (and server)
alias tmm="echo tmux: $TMUX"                              # = tmux new = tmux new-session
alias tmx="tmux new-session -ADs main"                    # Create "main" session or attach to it (if exists)
alias tt="tmux switch -t main || tmux new -As main"       # Switch to "main" session or create it if needed
alias vi="$BREW_HOME/bin/vim"                             # Shorthand for vim
alias vim="nvim"                                          # Replace vim with neovim
alias fdd="fd -IH"                                        # File system search
alias vimrc="${EDITOR} ${HOME}/.vimrc"                    # Vim config
alias yta="yt-dlp -x --restrict-filenames --add-metadata" # YouTube audio

# Time and Date
alias fulldate="date +%F"                                                          # Date in YYYY-MM-DD format
alias week="date +%V"                                                              # Get week number
alias timer="echo 'Timer started. <crtl+d> to break.' && date && time cat && date" # Stopwatch

# Network
alias ip="echo 'External IP:\n\n$(dig +short myip.opendns.com @resolver1.opendns.com)'" # External IP
alias ipp="curl icanhazip.com"                                                          # External IP #2
alias ips="ifconfig | grep inet | grep -v inet6 | awk '{print $2}'"                     # Internal IPs

# Scripts and functions
alias di="python3 $DOTFILES/scripts/fs_dropbox_ignore_node_modules.private.py"
alias fss="$DOTFILES/scripts/fs.sh"

function ytpl() {
    #  Download youtube playlist or channel

    builtin cd ~/Downloads

    # Format for h264 and h265 codec:   -f "bestvideo[vcodec~='^((he|a)vc|h26[45])'][ext=mp4][height>=720][height<=1080][fps>=23]+bestaudio[ext=m4a]" \
    # --restrict-filenames              Restrict filenames to only ASCII characters, and avoid "&" and spaces in filenames
    # --add-metadata                    Alias for --embed-metadata but supports youtube-dl as well
    # --embed-thumbnail                 yt-dlp: Embed thumbnail in the video as cover art || youtube-dl: Embed thumbnail in the audio as cover art
    # -i                                alias for --ignore-errors
    yt-dlp \
        -f "bestvideo[ext=mp4][height>=720][height<=1080][fps>=23]+bestaudio[ext=m4a]" \
        -o "%(upload_date)s-%(title)s_%(height)sp_%(fps)sfps.%(ext)s" \
        --playlist-reverse \
        --restrict-filenames \
        --add-metadata \
        --embed-thumbnail \
        -i \
        "$@"
}

function batch_convert() {
    # Converts an entire directory with ffmpeg
    # Usage: batch_convert mkv mp4
    # Ref: https://stackoverflow.com/a/52338741

    old_extension=$1
    new_extension=$2

    for i in *."$old_extension"; do
        ffmpeg -i "$i" "${i%.*}.$new_extension"
    done
}

function convert_to_hevc() {
    # Convert video to High Efficiency Video Coding (HEVC) / H.265

    if [ -z "$1" ]; then
        echo 'Input file is missing. E.g. "video.webm"'
        # non-zero decimal number in the 1 - 255 range for failure
        return 1
    fi

    # -preset medium    (default)
    # -c:a copy			stream copy audio instead of re-encoding
    ffmpeg -i $1 -c:v libx265 -preset ultrafast -vtag hvc1 -c:a copy "${1%.*}".hevc.mp4
}

function convert_to_avc() {
    # Convert video to Advanced Video Coding (AVC) / H.264

    if [ -z "$1" ]; then
        echo 'Input file is missing. E.g. "video.webm"'
        # non-zero decimal number in the 1 - 255 range for failure
        return 1
    fi

    # -c:a copy			stream copy audio instead of re-encoding
    # -preset medium    (default)
    ffmpeg -i $1 -c:v libx264 -c:a copy "${1%.*}".avc.mp4
}
function convert_to_mp3s() {
    # Convert all files of the same format in the folder to MP3s

    if [ -z "$1" ]; then
        echo 'FILE FILTER ARGUMENT IS MISSING. E.g. "*.opus"'
        # non-zero decimal number in the 1 - 255 range for failure
        return 1
    fi

    for f in "$1"; do ffmpeg -i "$f" "${f%.*}.mp3"; done
}
function merge_mp3s() {
    # Merge all *.mp3 files into single MP3 file

    for file in *.mp3; do
        echo "Processing $file"
        echo "file '$file'" >>list.txt
        ffprobe "$file" 2>&1 | awk '/Duration/ {print $2}'
    done
    ffmpeg -f concat -safe 0 -i list.txt -c copy merged.mp3
    rm list.txt
    mv merged.mp3 "${PWD##*/}".mp3
}

function git_change_origin() {
    # Change old git repo remote origin to new

    if [ -z "$1" ]; then
        echo 'ERROR: new remote is missing'
        # non-zero decimal number in the 1 - 255 range for failure
        return 1
    fi

    # Remove old remote
    git remote rm origin
    # Add new remote
    git remote add origin $1
    git push --set-upstream origin master
    git push -u origin master
}

function extract_audio() {
    # Extract audio from video

    # -vn					skips the inclusion of the video stream,
    # -acodec copy			copies the picked audio streams (without re-encoding)
    ffmpeg -i $1 -vn -acodec copy "${1%.*}.aac"
}

function ver() {
    # os-check - get basic info about OS running the script, OS version, build.

    echo "uname: $(uname)\n" # Linux, Darwin, MINGW64_NT-10.0-25211
    echo "OSTYPE: $OSTYPE\n" # linux-gnu, darwin21, msys (Windows in Git Bash)
    uname -a && echo "\n"

    if [[ "$(uname)" == "Darwin" ]]; then
        sw_vers                            # macOS and build version
        sw_vers -productVersion            # macOS version only
        system_profiler SPSoftwareDataType # OS version, computer name, user name, etc.
    fi
}

function append_less_pipe() {
    # Add "| less" to passed param

    if [ -z "$1" ]; then
        echo "ERROR: missing params"
        return 1
    fi
    $1 | less
}

function mpv_detached() {
    # Run detached MPV player which allows closing terminal without ending MPV
    mpv --no-terminal 2 $1 &>/dev/null &
}

# Files and directories
alias npc="nvim ~/Dropbox/DropsyncFiles/audiob/notes_PC.md"
